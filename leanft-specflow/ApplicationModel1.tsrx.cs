//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace leanft_specflow
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "14.02")]
	public class AOSAppModel : AppModelBase
	{
		#region Constructors

		public AOSAppModel(ITestObject contextTestObject)
		{
			Name = @"AOSAppModel";
			AdvantageShoppingPage = new AdvantageShoppingPageNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public AdvantageShoppingPageNode AdvantageShoppingPage { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class AdvantageShoppingPageNode : PageNodeBase
		{
			#region Constructors
		
			public AdvantageShoppingPageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				MICEShopNowLink = new MICEShopNowLinkNode(this, applicationModel);
				SCROLLERTYPELink = new SCROLLERTYPELinkNode(this, applicationModel);
				ProductsColors545195WebElement = new ProductsColors545195WebElementNode(this, applicationModel);
				ProductsColors3683D1WebElement = new ProductsColors3683D1WebElementNode(this, applicationModel);
				WebElement1599 = new WebElement1599Node(this, applicationModel);
				WebElement2999 = new WebElement2999Node(this, applicationModel);
				COLORLink = new COLORLinkNode(this, applicationModel);
				DisplayName = @"Advantage Shopping";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public MICEShopNowLinkNode MICEShopNowLink { get; private set; }
			public SCROLLERTYPELinkNode SCROLLERTYPELink { get; private set; }
			public ProductsColors545195WebElementNode ProductsColors545195WebElement { get; private set; }
			public ProductsColors3683D1WebElementNode ProductsColors3683D1WebElement { get; private set; }
			public WebElement1599Node WebElement1599 { get; private set; }
			public WebElement2999Node WebElement2999 { get; private set; }
			public COLORLinkNode COLORLink { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class MICEShopNowLinkNode : LinkNodeBase
			{
				#region Constructors
			
				public MICEShopNowLinkNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"MICE Shop Now ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					InnerText = @"MICE Shop Now ",
					TagName = @"DIV"
				};
				}
			
				#endregion
			
			}

			public sealed class SCROLLERTYPELinkNode : LinkNodeBase
			{
				#region Constructors
			
				public SCROLLERTYPELinkNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"SCROLLER TYPE ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					InnerText = @"SCROLLER TYPE ",
					TagName = @"H4"
				};
				}
			
				#endregion
			
			}

			public sealed class ProductsColors545195WebElementNode : WebElementNodeBase
			{
				#region Constructors
			
				public ProductsColors545195WebElementNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"productsColors545195";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					AccessibilityName = string.Empty,
					ClassName = @"productColor ",
					InnerText = string.Empty,
					TagName = @"A",
					Index = 3
				};
				}
			
				#endregion
			
			}

			public sealed class ProductsColors3683D1WebElementNode : WebElementNodeBase
			{
				#region Constructors
			
				public ProductsColors3683D1WebElementNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"productsColors3683D1";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					AccessibilityName = string.Empty,
					ClassName = @"productColor ",
					InnerText = string.Empty,
					TagName = @"A",
					Index = 1
				};
				}
			
				#endregion
			
			}

			public sealed class WebElement1599Node : WebElementNodeBase
			{
				#region Constructors
			
				public WebElement1599Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"$15.99 ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					InnerText = @"$15.99 ",
					TagName = @"A"
				};
				}
			
				#endregion
			
			}

			public sealed class WebElement2999Node : WebElementNodeBase
			{
				#region Constructors
			
				public WebElement2999Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"$29.99 ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription {
					InnerText = @"$29.99 ",
					TagName = @"A"
				};
				}
			
				#endregion
			
			}

			public sealed class COLORLinkNode : LinkNodeBase
			{
				#region Constructors
			
				public COLORLinkNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"COLOR";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.LinkDescription {
					InnerText = @"COLOR",
					TagName = @"H4"
				};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public abstract class WebElementNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IWebElement, HP.LFT.SDK.Web.WebElementDescription>, HP.LFT.SDK.Web.IWebElement
		{
			public WebElementNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string AccessibilityName
			{
				get { return Concrete.AccessibilityName; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			#endregion
		}

		public abstract class LinkNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.ILink, HP.LFT.SDK.Web.LinkDescription>, HP.LFT.SDK.Web.ILink
		{
			public LinkNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Href
			{
				get { return Concrete.Href; }		
			}
	
			public string Target
			{
				get { return Concrete.Target; }		
			}
	
			public string FontName
			{
				get { return Concrete.FontName; }		
			}
	
			public string BackgroundColor
			{
				get { return Concrete.BackgroundColor; }		
			}
	
			public string Color
			{
				get { return Concrete.Color; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string AccessibilityName
			{
				get { return Concrete.AccessibilityName; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			#endregion
		}

		public abstract class PageNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IPage, HP.LFT.SDK.Web.PageDescription>, HP.LFT.SDK.Web.IPage
		{
			public PageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TResult RunJavaScript<TResult>(string scriptToRun) 
			{
				return Concrete.RunJavaScript<TResult>(scriptToRun);
			}
	
			public string RunJavaScript(string scriptToRun)
			{
				return Concrete.RunJavaScript(scriptToRun);
			}
	
			public void Sync()
			{
				 Concrete.Sync();
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Url
			{
				get { return Concrete.Url; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		#endregion
	}
}
